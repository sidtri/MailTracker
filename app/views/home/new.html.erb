<fieldset>
  <legend>Compose</legend>
  <%= form_tag home_index_path, class: 'container', id: 'compose_form' do %>
    <%= label_tag(:to, "To ") %>
    <%=  text_field_tag(:to, @template.to, id: "to" ) %>
    <%= label_tag(:subject, "Subject ") %>
    <%=  text_field_tag(:subject, @template.subject, id: "subject" ) %>
    <%= label_tag(:message, "Message ") %>
    <%=  text_field_tag(:message, @template.message, id: "message" ) %>
    <%= hidden_field_tag(:parse_message, @template.parse_message, id: 'parse_message') %>
    <hr>
    <span>Sample </span>
    <%= check_box_tag :sample, "1", true %>
    <%= submit_tag "Send", class: "pull-right"  %>
  <% end %>
</fieldset>


<script>

  var sm = new SimpleMDE({
      autofocus: true,
      autosave: true,
      blockStyles: {
          bold: "__",
          italic: "_"
      },
      element: document.getElementById("message"),
      forceSync: true,
      indentWithTabs: false,
      insertTexts: {
          horizontalRule: ["", "\n\n-----\n\n"],
          image: ["![](http://", ")"],
          link: ["[", "](http://)"],
          table: ["", "\n\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text      | Text     |\n\n"],
      },
      lineWrapping: false,
      parsingConfig: {
          allowAtxHeaderWithoutSpace: true,
          strikethrough: false,
          underscoresBreakWords: true,
      },
      placeholder: "Type here...",
      promptURLs: true,
      renderingConfig: {
          singleLineBreaks: false,
          codeSyntaxHighlighting: true,
      },
      shortcuts: {
          drawTable: "Cmd-Alt-T"
      },
      showIcons: ["code", "table"],
      spellChecker: false,
      status: false,
      status: ["autosave", "lines", "words", "cursor"], // Optional usage
      status: ["autosave", "lines", "words", "cursor", {
          className: "keystrokes",
          defaultValue: function(el) {
              this.keystrokes = 0;
              el.innerHTML = "0 Keystrokes";
          },
          onUpdate: function(el) {
              el.innerHTML = ++this.keystrokes + " Keystrokes";
          }
      }], // Another optional usage, with a custom status bar item that counts keystrokes
      styleSelectedText: false,
      tabSize: 4,
  });

  sm.value(`## Dear Sir,

Today worked under <span style="text-decoration: underline">DispatchTrack Intermodal</span> tasks includes,

#### Completed

* [DTI#951](https://kaverisoft.unfuddle.com/a?utm_campaign=compose&utm_medium=email&utm_source=compose_mailer#/projects/19/tickets/by_number/951) Worked on move list screen filters ( move type list and status columns ) ( Review pending )
* [DTI#951](https://kaverisoft.unfuddle.com/a?utm_campaign=compose&utm_medium=email&utm_source=compose_mailer#/projects/19/tickets/by_number/951) Worked on displaying move type and status at move edit screen from other models using api and send data to server. ( Review pending )
* [DTI#950](https://kaverisoft.unfuddle.com/a?utm_campaign=compose&utm_medium=email&utm_source=compose_mailer#/projects/19/tickets/by_number/950) Add MoveType with custom fields support (review changes completed ).

#### Progress

* [DTI#951](https://kaverisoft.unfuddle.com/a?utm_campaign=compose&utm_medium=email&utm_source=compose_mailer#/projects/19/tickets/by_number/951) Working on new screen design for add pictures under move edit screen from dti#v2 zeplin screens.

#### Plan

* [DTI#951]() Should nd.`);


$('#compose_form').on('submit', function(){
  sm.togglePreview();
  $('#parse_message').val($('.editor-preview').html());
})
</script>